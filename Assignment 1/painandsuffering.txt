        // for (int i = 0; i < grid.length; i++) 
        // {
            
        //     for (int j = 0; j < grid[0].length; j++) 
        //     {
        //         if (i == 0 && j == 0) 
        //         {
        //             if (grid[(i + grid.length) % grid.length][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, (i + grid.length) % grid.length, (j + grid[0].length) % grid[0].length);
        //             }
        //             if (grid[(i + grid.length) % grid.length][j])
        //             {
        //                 QuickUnionFind.union(i, j, (i + grid.length) % grid.length, j);
        //             }
        //             if (grid[(i + grid.length) % grid.length][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, (i + grid.length) % grid.length, j+1);
        //             }

                    
        //             if (grid[i][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, i, (j + grid[0].length) % grid[0].length);
        //             }
        //             if (grid[i][j])
        //             {
        //                 continue;
        //             }
        //             if (grid[i][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i, j+1);
        //             }


        //             if (grid[i+1][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, (j + grid[0].length) % grid[0].length);
        //             }
        //             if (grid[i+1][j])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j);
        //             }
        //             if (grid[i+1][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j+1);
        //             }
        //         }

        //         if (i == 0 && j < grid[0].length && j != 0)
        //         {
        //             if (grid[(i + grid.length) % grid.length][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, (i + grid.length) % grid.length, j-1);
        //             }
        //             if (grid[(i + grid.length) % grid.length][j])
        //             {
        //                 QuickUnionFind.union(i, j, (i + grid.length) % grid.length, j);
        //             }
        //             if (grid[((i + grid.length) % grid.length)][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, (i + grid.length) % grid.length, j+1);
        //             }
    
                    
        //             if (grid[i][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i, j-1);
        //             }
        //             if (grid[i][j])
        //             {
        //                 continue;
        //             }
        //             if (grid[i][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i, j+1);
        //             }
    
    
        //             if (grid[i+1][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j-1);
        //             }
        //             if (grid[i+1][j])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j);
        //             }
        //             if (grid[i+1][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j+1);
        //             }
        //         }

        //         if (j == 0 && i != grid.length && i != 0)
        //         {
        //             if (grid[i-1][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, (j + grid[0].length) % grid[0].length);
        //             }
        //             if (grid[i-1][j])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j);
        //             }
        //             if (grid[i-1][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j+1);
        //             }
    
                    
        //             if (grid[i][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, i, (j + grid[0].length) % grid[0].length);
        //             }
        //             if (grid[i][j])
        //             {
        //                 continue;
        //             }
        //             if (grid[i][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i, j+1);
        //             }


        //             if (grid[i+1][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, (j + grid[0].length) % grid[0].length);
        //             }
        //             if (grid[i+1][j])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j);
        //             }
        //             if (grid[i+1][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j+1);
        //             }
        //         } 

        //         if (i == grid.length && j == grid[0].length)
        //         {
        //             if (grid[i-1][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j-1);
        //             }
        //             if (grid[i-1][j])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j);
        //             }
        //             if (grid[i-1][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, (j + grid[0].length) % grid[0].length);
        //             }
    
                    
        //             if (grid[i][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i, j-1);
        //             }
        //             if (grid[i][j])
        //             {
        //                 continue;
        //             }
        //             if (grid[i][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, i, (j + grid[0].length) % grid[0].length);
        //             }
    
    
        //             if (grid[(i + grid.length) % grid.length][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, (i + grid.length) % grid.length, j-1);
        //             }
        //             if (grid[(i + grid.length) % grid.length][j])
        //             {
        //                 QuickUnionFind.union(i, j, (i + grid.length) % grid.length, j);
        //             }
        //             if (grid[(i + grid.length) % grid.length][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, (i + grid.length) % grid.length, (j + grid[0].length) % grid[0].length);
        //             }
        //         } 

        //         if (i == grid.length && j != grid[0].length && j != 0)
        //         {
        //             if (grid[i-1][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j-1);
        //             }
        //             if (grid[i-1][j])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j);
        //             }
        //             if (grid[i-1][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j+1);
        //             }
    
                    
        //             if (grid[i][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i, j-1);
        //             }
        //             if (grid[i][j])
        //             {
        //                 continue;
        //             }
        //             if (grid[i][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i, j+1);
        //             }
    
    
        //             if (grid[(i + grid.length) % grid.length][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j-1);
        //             }
        //             if (grid[(i + grid.length) % grid.length][j])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j);
        //             }
        //             if (grid[(i + grid.length) % grid.length][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j+1);
        //             }
        //         }
                
        //         if (j == grid[0].length && i != grid.length && i != 0)
        //         {
        //             if (grid[i-1][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j-1);
        //             }
        //             if (grid[i-1][j])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j);
        //             }
        //             if (grid[i-1][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, (j + grid[0].length) % grid[0].length);
        //             }

                    
        //             if (grid[i][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i, j-1);
        //             }
        //             if (grid[i][j])
        //             {
        //                 continue;
        //             }
        //             if (grid[i][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, i, (j + grid[0].length) % grid[0].length);
        //             }


        //             if (grid[i+1][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j-1);
        //             }
        //             if (grid[i+1][j])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j);
        //             }
        //             if (grid[i+1][(j + grid[0].length) % grid[0].length])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, (j + grid[0].length) % grid[0].length);
        //             }
        //         }
                
        //         if (i != 0 && i != grid.length && j != 0 && j != grid[0].length)
        //         {
        //             if (grid[i-1][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j-1);
        //             }
        //             if (grid[i-1][j])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j);
        //             }
        //             if (grid[i-1][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i-1, j+1);
        //             }

                    
        //             if (grid[i][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i, j-1);
        //             }
        //             if (grid[i][j])
        //             {
        //                 continue;
        //             }
        //             if (grid[i][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i, j+1);
        //             }


        //             if (grid[i+1][j-1])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j-1);
        //             }
        //             if (grid[i+1][j])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j);
        //             }
        //             if (grid[i+1][j+1])
        //             {
        //                 QuickUnionFind.union(i, j, i+1, j+1);
        //             }
        //         }
		
		
		        // for (int i = 0; i < newRoots.size(); i++)
        // {
        //     System.out.println(newRoots.get(i));
        // }
		
		